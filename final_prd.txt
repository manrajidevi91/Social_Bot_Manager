# Product Requirements Document (PRD) – Bot Management SaaS System

## Overview
This system enables dynamic uploading, registration, pricing, and access management of Flask-based bot applications. The project includes user-side subscription workflows and a full-featured admin panel for bot control, plan management, and analytics.

---

## USER MODULE

1. Landing Page
   - Public access
   - Shows login if not authenticated
   - Displays top active discount

2. Google OAuth Login
   - New users created in clients table (no plan assigned)
   - Users with no plan redirected to plan selection

3. Plan Selection
   - Package Plans: pre-configured by admin
   - Custom Plans: user-selected apps with bundle discounts
   - Pricing durations: 1 month / 6 months / 1 year
   - Valid discounts applied dynamically
   - Payment integration (Razorpay)

4. Dashboard Access
   - App list, plan validity
   - In-app popup alert + email on expiry
   - Grace period: 3 days
   - Redirect to plan selection if expired

5. Custom Plan Builder
   - Apps priced individually by admin
   - Bundle discounts applied by tier
   - Final calculated price → payment → bundle access

6. Other Features
   - Submit feedback (per app)
   - Send special request (retirement/custom feature)
   - Manage plan, logout, and profile access

---

## ADMIN MODULE

1. Admin Login
   - Via username/password (admin / admin123)
   - Admin-only dashboard

2. Dashboard Summary
   - Stats: users, apps, revenue, expired plans, alerts

3. Plan Management
   - Add/Edit/Delete package plans
   - Define features and price per duration
   - Attach apps to each plan
   - Set visibility status

4. Bot App Upload
   - Upload ZIP containing app.py and optionally requirements.txt
   - Extract and rename to main.py
   - Install dependencies via `venv.bat`
   - Register route with DispatcherMiddleware
   - Assign price, icon, and description

5. Custom Plan Pricing Rules
   - Define bundle discount tiers (based on app count & duration)
   - Used in user-side custom builder

6. App Management
   - Set per-app pricing (for custom plans)
   - Edit, deactivate, delete bots

7. Discounts & Offers
   - Create time-bound discounts
   - Apply to package plans or bundle logic
   - Control visibility via start and expiry

8. User Management
   - View, filter, and manage user accounts
   - View plan/app access
   - Extend, reset, or revoke plan

9. Customer Requests
   - View and respond to submitted requests
   - Log all responses and decisions

10. Feedback Moderation
    - View ratings/comments
    - Delete/flag abusive entries

11. Payment Logs
    - Razorpay Ref ID, plan ID, bundle ID
    - Exportable in CSV

12. Audit Logs
    - Tracks every admin change

13. Settings
    - Manage OAuth, Razorpay, SMTP, and grace config

14. Analytics
    - Revenue, app usage, plan popularity
    - Exportable metrics

---

## Dynamic Bot Integration (Core Feature)
- Uploaded Flask bots run independently at assigned routes
- DispatcherMiddleware maps: /bot_name → app instance
- Bot isolation via folders, dependency setup per bot
- Editable, updatable via admin dashboard

## Security & Validation
- Session-based access with Flask session
- Secure file uploads (ZIP + image)
- Controlled admin-only upload & route mapping
- PID tracking + graceful termination before bot edit/delete

---

## Deployment Notes
- Gunicorn setup with DispatcherMiddleware
- Static/media files served via Flask
- Batch script support for Windows dependency installation